swagger: '2.0'
info:
  version: 1.0.0
  title: Swagger Insurance Org
  description: A sample API that uses a Insurance Org as an example to demonstrate features in the swagger-2.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
  license:
    name: MIT
host: premiumstore.swagger.io
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /premiums:
    get:
      description: Returns all premiums from the system that the user has access to
      operationId: findPremiums
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: premium response
          schema:
            type: array
            items:
              $ref: '#/definitions/Premium'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
    post:
      description: Creates a new premium in the store.  Duplicates are allowed
      operationId: addPremium
      produces:
        - application/json
      parameters:
        - name: premium
          in: body
          description: Premium to add to the store
          required: true
          schema:
            $ref: '#/definitions/NewPremium'
      responses:
        '200':
          description: premium response
          schema:
            $ref: '#/definitions/Premium'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /premiums/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the premium
      operationId: findPremiumById
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: id
          in: path
          description: ID of premium to fetch
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: premium response
          schema:
            $ref: '#/definitions/Premium'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
    delete:
      tags:
        - Provider
      description: deletes a single premium based on the ID supplied
      operationId: deletePremium
      parameters:
        - name: id
          in: path
          description: ID of premium to delete
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: premium deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
definitions:
  Premium:
    type: object
    allOf:
      - $ref: '#/definitions/NewPremium'
      - required:
          - id
        properties:
          id:
            type: integer
            format: int64
  NewPremium:
    type: object
    required:
      - name
    properties:
      firstname:
        type: string
        description: name of the user
      lastname:
        type: string
      dateofbirth:
        type: string
      tag:
        type: string
  ErrorModel:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
